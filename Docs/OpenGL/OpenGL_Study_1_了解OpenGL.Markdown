# 了解OpenGL

笔记抄录教程
[中文链接](https://learnopengl-cn.github.io/ "国外大佬的中文教程网站")
[英文链接](https://learnopengl.com/ "国外大佬的英文教程网站")


## 简介
OpenGL，全称：Open Graphics Library，译名：开放图形库。一般被认为一个API，里面包含了一系列可以操作图形、图像的函数。  
其实这是不正确的说法，OpenGL其实是一个由Khronos组织制定并维护的规范。
这个规范严格规定了每个函数的输出值和他们应该如何表现，
至于函数内部具体的实现，留给实现此规范的开发人员自己实现。

OpenGL库一般都是由显卡制作厂商的开发者实现的。  
这通常意味着你购买的显卡所支持的OpenGL版本都是专门为这个系列显卡开发的。
所以，任何与OpenGL规范不符的表现，都可以认为是开发者留下的BUG。

> 由于OpenGL的大多数实现都是由显卡厂商编写的，所以当bug出现时，
> 一般可以通过升级显卡驱动来解决，这些驱动会包括你的显卡能支持的最新版本的OpenGL，
> 这也是为什么总是建议你偶尔更新一下显卡驱动


*Khronos Group团队成立于 2000 年 1 月 由包括 3Dlabs, ATI, Discreet, Evans & Sutherland, Intel, Nvidia, SGI 和 Sun Microsystems 在内的多家国际知名多媒体行业领导者创立，致力于发展开放标准的应用程序接口 API ，以实现在多种平台和终端设备上的富媒体创作、加速和回放。*


OpenGL 3.3规范文档[链接](https://registry.khronos.org/OpenGL/specs/gl/glspec33.core.pdf)

### 版本

在OpenGL3.2之前，使用**立即渲染模式**（固定渲染模式），这种模式简单易上手，可以很容易地绘制图形，因为OpenGL的大多数功能都被库隐藏起来了，开发者不必了解编程细节就可以使用。  
但是这种模式有个明显的缺点是，不够灵活，开发者不能方便地制作出自己想要的效果。  
随着开发者追求灵活性的呼声越来越高，规范也变得更加灵活，最后OpenGL宣布从3.2开始废除立即渲染模式，并鼓励开发者使用核心模式下进行开发。  

**核心模式**（Core-prefile）要求开发者对图形编程有更深层次的理解，并且迫使开发者使用现代函数。
当你试图在核心模式下调用废弃的函数时，OpenGL会抛出错误并终止绘图。

更新的版本都是在3.3版本基础上增加了额外的功能，并没有改动核心框架。
新版本只是引入了一些更加有效率或者更有用的方式去完成相同的功能。

> 当使用新版本的OpenGL特性时，只有新一代的显卡能够支持你的应用程序。
> 这也是为什么大多数开发者基于较低版本的OpenGL编写程序，并只提供选项启用新版本的特性。


### 一大特性

OpenGL 的一大特性就是扩展支持，当一个显卡公司提出一个新特性或者渲染上的大优化，通常会以扩展的方式在驱动里实现。

通常，当一个扩展非常流行或者有用时，它终将成为 OpenGL规范 的一部分

~~~C#
if (GL_ARB_extension_name)
{
    // 使用硬件支持的全新的现代特性
}
else
{
    // 不支持此扩展: 用旧的方式去做
}
~~~

### 状态机

OpenGL 本质上是一个状态机，依靠上下文设置信息，一般依靠设置选项，操作缓存更改 OpenGL 状态。
OpenGL 的函数一般分为两类，一种是状态设置的函数（State-changing） 一种是状态使用的函数（State-Using）


### 抽象

OpenGL 库是使用C语言编写的，同时支持多个语言的派生，但其内核仍然是一个C库，由于C的一些语言结构不易被翻译到其他的高级语言，因此 OpenGL 开发时导入了一些抽象层。  
对象（Object）就是其中一个。





























