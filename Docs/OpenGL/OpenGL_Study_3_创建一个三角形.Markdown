本节课来学习如何使用OpenGL创建一个三角形。OpenGL是一个3D图形库

在opengl中，任何事物都在3D空间，而屏幕和窗口却是2D像素数组。所以OpenGL的大部分工作都是关于如何把3D坐标转变为适应屏幕的2D像素这一问题。3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线管理的。  
**图形渲染管线（Graphics Pipeline）：实际指一堆原始图形数据途经一个输送管道，期间经过各种变化处理，最终出现在屏幕上的过程。    
从输入输出的角度描述GP：一组3D坐标作为输入，把它们转变为屏幕上的有色2D像素作为输出。**

GP可以被划分为两大部分：3D坐标转变为2D坐标；2D坐标转变为实际的有颜色的像素。  

>2D坐标和像素也是不同的，2D坐标精确表示一个点在2D空间中的位置，而2D像素是这个点的近似值，2D像素受到你的屏幕/窗口分辨率的限制。

实际上GP依据输入输出节点划分为更加细致的几个阶段。

![阶段划分](../images/542badced4406f5c171504388c5eebd4204fb453372ae7918477b8b45a28e24d.png)  

下面我们以单纯绘制一个纯色三角形为目标，来讲解各个阶段。

# 第一阶段：输入顶点数据。  

一个三角形有三个顶点，我们将这三个顶点以数组的形式传入GP，并称他们为**顶点数据 Vertex Data**。在opengl中顶点数据用**顶点属性 Vertex Attribute**表示，它可以包含任何我们想用的数据。这里我们一个顶点就用一个3D位置和颜色值描述就足够了。对于我们定义好的顶点属性，OpenGL只处理属于**标准化设备坐标 Normalized Device Coordinates**的坐标。  
>opengl仅当3D坐标在3个轴（x,y,z）上-1.0到1.0范围内时才处理它。所有在这个范围内的坐标叫标准化设备坐标。最终，此范围内的坐标会显示在屏幕上，这个范围之外的不会显示。

定义好顶点属性后，输入到顶点着色器中。顶点着色器的主要目的是把3D坐标转换为另一种3D坐标+对顶点属性做一些处理。  
顶点属性到达以后，顶点着色器要在GPU上创建内存用于储存我们的顶点属性，还要配置OpenGL如何解释这些内存，并指定其如何发送给显卡。
## 顶点属性的显存（显存即为GPU内存）管理
使用顶点缓冲对象（Vertex Buffer Objects VBO）管理，它会在显存中储存大量顶点。使用它的好处是，可以一次性发送一大批数据到显卡。 

顶点缓冲对象是opengl众多缓存对象类型中的一个，其缓冲类型为GL_ARRAY_BUFFER。它通过glGenBuffers函数创建，第一个参数为指定的独一无二的ID，第二个参数为引用的对象。使用glBindBuffer可以把创建的缓冲对象绑定到指定类型。（OpenGL允许同时绑定不同的缓存对象类型。）
``` C++
unsigned int VBO;
glGenBuffers(1, &VBO);
glBindBuffer(GL_ARRAY_BUFFER, VBO)
```



# 第二阶段：图元装配
